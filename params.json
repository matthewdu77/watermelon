{
  "name": "Watermelon",
  "tagline": "Concurrent Hash Table",
  "body": "### Summary\r\nWatermelon is a concurrent, lock-free implementation of unordered associative arrays in C++. Watermelon supports all the same operations as `std::unordered_map`, making it an easy drop-in replacement when parallelizing single-threaded code.\r\n\r\n### Background\r\nAssociative arrays, more commonly referred to as dictionaries, are a vital part of modern software systems. Generally, associative arrays support insert, delete, and lookup operations. In C++, associative arrays also support iteration, along with assignment, equality, and swap operations. However, the default implementation of C++ associative arrays is not thread-safe, and so requires external locking to be used in multi-threaded programs.\r\n\r\nAs computers continue to be built with more processors, and more cores per processors, performant concurrent data structures are becoming increasingly necessary. By using common atomic primitives such as compare-and-swap and atomic arithmetic instead of locks, Watermelon will provide a performant, non-blocking implementation of a hash table, and use the hash table to implement associative arrays.\r\n\r\n### The Challenge\r\nThis project will likely run into difficulties with some of the additional requirements imposed by the language of implementation. `std::unordered_map` in C++ requires the implementation of equality and swap operations, along with a copy constructor. Further, the proposed hash table implementation will require dynamic resizing. These operations will all require synchronizing operations over the entire hash table. Implementing this in a lock-free manner is likely to be difficult.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}