{
  "name": "Watermelon",
  "tagline": "Concurrent Hash Table",
  "body": "### Summary\r\nWatermelon will be a concurrent, lock-free implementation of unordered associative arrays in C++. Watermelon supports all the same operations as `std::unordered_map`, making it an easy drop-in replacement when parallelizing single-threaded code.\r\n\r\n### Background\r\nAssociative arrays, more commonly referred to as dictionaries, are a vital part of modern software systems. Generally, associative arrays support insert, delete, and lookup operations. In C++, associative arrays also support iteration, along with assignment, equality, and swap operations. However, the default implementation of C++ associative arrays is not thread-safe, and so requires external locking to be used in multi-threaded programs.\r\n\r\nAs computers continue to be built with more processors, and more cores per processors, performant concurrent data structures are becoming increasingly necessary. By using common atomic primitives such as compare-and-swap and atomic arithmetic instead of locks, Watermelon will provide a performant, non-blocking implementation of a hash table, and use the hash table to implement associative arrays.\r\n\r\n### The Challenge\r\nWatermelon will likely run into difficulties with some of the additional requirements imposed by the language of implementation. `std::unordered_map` in C++ requires the implementation of equality and swap operations, along with a copy constructor. Further, the proposed hash table implementation will require dynamic resizing. These operations will all require synchronizing operations over the entire hash table. Implementing this in a lock-free manner is likely to be difficult.\r\n\r\n### Resources\r\nWatermelon will be tested on the GHC cluster machines and on latedays.\r\n\r\nAll development will proceed from scratch.\r\n\r\n### Goals and Deliverables\r\nWatermelon will at the bare minimum implement a functional subset of `std::unordered_map`, including the basic insert, delete and lookup operations, with dynamic resizing and iteration. Watermelon will also deliver a benchmark suite comparing its performance against other concurrent associative array implementations, such as a basic `std::unordered_map` protected by a mutex, Intel's [`tbb::concurrent_hash_map`](https://software.intel.com/en-us/node/506077), and [Junction](https://github.com/preshing/junction).\r\n\r\nWatermelon hopes to outperform `tbb:concurrent_hash_map` and the lock-protected `std::unordered_map`.\r\n\r\nIf time permits, Watermelon will attempt to implement remainder of `std::unordered_map`, including copy and move semantics, equality, and swap operations.\r\n\r\n### Platform\r\nWatermelon will be implemented in C++11 with atomic operations such as compare and swap, and atomic arithmetic to implement its hash table. Watermelon will require Intel processors, and be implemented in plain C++.\r\n\r\n### Schedule\r\nApril 2 - April 8 - Implement benchmarking code\r\nApril 9 - April 13 - Implement basic associative array operations on a non-resizable hash-map with chaining.\r\nApril 14 - April 17 - Carnival. Lol no work.\r\nApril 18 - April 22 - Implement resizing.\r\nApril 23 - April 29 - Implement associative array with probing strategies.\r\nApril 30 - May 6 - Tune implementations and select best option.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}